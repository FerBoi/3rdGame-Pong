/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package view;

import controller.Game;
import controller.InputListener;
import java.awt.Graphics;

/**
 *
 * @author Fernando GJ
 */
public class MainWindow extends javax.swing.JFrame {
    private final Game CONTROLLER;

    /** Creates new form GameBoard
     * @param controller */
    public MainWindow(Game controller) {
        initComponents();
        
        this.CONTROLLER = controller;
        this.gameboard.setMainWindow(this);
        
        this.gameboard.requestFocus();
        this.gameboard.addKeyListener(new InputListener(this.CONTROLLER));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameboard = new view.GameBoard();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Pong");
        setFocusable(false);
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);

        javax.swing.GroupLayout gameboardLayout = new javax.swing.GroupLayout(gameboard);
        gameboard.setLayout(gameboardLayout);
        gameboardLayout.setHorizontalGroup(
            gameboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        gameboardLayout.setVerticalGroup(
            gameboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(gameboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(gameboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateUI() {
        this.gameboard.repaint();
    }
    
    public boolean isGameStarted() {
        return this.CONTROLLER.isGameStarted();
    }
    
    public void renderGame(Graphics g) {
        this.CONTROLLER.renderGame(g);
    }
    
    public void incrementScore(int newScore, boolean isPlayerOne) {
        this.gameboard.incrementPoint(isPlayerOne, newScore);
    }
    
    public boolean isGameFinished() {
        return this.CONTROLLER.isGameFinished();
    }
    
    public Object[] whoWon() {
        return new Object[] {this.CONTROLLER.getWinner()};
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.GameBoard gameboard;
    // End of variables declaration//GEN-END:variables











} // end MainWindow
